package Multi_Dimensional_Arrays;
import java.util.ArrayList;


public class sprialMatrix {
    public static void main(String[] args) {
        int[][] matrix = { { 1, 2, 3, 4, 5 }, { 16, 17, 18, 19, 6 }, { 15, 24, 25, 20, 7 }, { 14, 23, 22, 21, 8 },
                { 13, 12, 11, 10, 9 } };
        // int[][] matrix = { {0,0} };

        // System.out.println("Given Matrix");
        for (int[] row : matrix) {
            System.out.print("[");
            for (int num : row) {
                System.out.print(num + " ");
            }
            System.out.print("]");
    System.out.println();
        }

        spiralPrint(matrix);
    }

    public static void spiralPrint(int matrix[][]) {

          if(matrix.length<2){
            System.out.println(" ");
        }
        else{
            int start_row = 0;
            int start_column = 0;
            int end_row = matrix.length - 1;
            int end_column = matrix[0].length - 1;

            ArrayList<Integer> spiralNumbers = new ArrayList<>();
    
            System.out.println("Matrix Intial Status:");
            System.out.println("start_row: " + start_row);
            System.out.println("end_row: " + end_row);
            System.out.println("start_column: " + start_column);
            System.out.println("end_column: " + end_column);
            System.out.println("###############################");
    
            int i = 0, j = 0;
    
            i = start_row;
            j = start_column;
            outer_loop: while (((start_row >= 0 && start_row <= end_row) && end_column < matrix[start_row].length)
                    && (i >= 0 && j < matrix.length)) {
                System.out.println("----------------------------------------");
                System.out.println("start_row: " + start_row);
                System.out.println("end_row: " + end_row);
                System.out.println("start_column: " + start_column);
                System.out.println("end_column: " + end_column);
                System.out.println("----------------------------------------");
    
                System.out.println("*******************************************");
                // >Priting Top Row
                
                System.out.println("Printing The Top Row");
                // if(j<=end_column && i<=(end_row/2)){
                    for (j = start_column; j <= end_column && i==start_row;) {
                        
                        if (j == end_column) {
                        System.out.println("i=" + i + ",j=" + j + ": " + matrix[i][j]);
                        // spiralNumbers.add(matrix[i][j]);
                        // System.out.print(matrix[i][j]+" ");
                        start_row++;
                        System.out.println("First Row Printed start_row= " + start_row);
                        break;
                    } else {
                        System.out.println("i=" + i + ",j=" + j + ": " + matrix[i][j]);
                        // spiralNumbers.add(matrix[i][j]);
                        // System.out.print(matrix[i][j]+" ");
                        j++;
                    }
                    
                }
                // }
                
                // > Printing Last Column
                System.out.println("Printing The Last Column");
                
                // if(i<=end_row){
                    for (i = start_row; i <= end_row && j==end_column;) {
                        // System.out.println("i="+i+",j="+j);
                        if (i == end_row) {
                            System.out.println("i=" + i + ",j=" + j + ": " + matrix[i][j]);
                            // spiralNumbers.add(matrix[i][j]);
                            // System.out.print(matrix[i][j]+" ");
                            end_column--;
                            System.out.println("last Column Printed end_column= " + end_column);
                            break;
                        } else {
                            System.out.println("i=" + i + ",j=" + j + ": " + matrix[i][j]);
                            // spiralNumbers.add(matrix[i][j]);
                            // System.out.print(matrix[i][j]+" ");
                            i++;
                        }
                    }
                    // }
                    //> Printing the Lastrow
                    System.out.println("Printing The Last Row");
                    for (j = end_column; j >= start_column && i==end_row;) {
                        if (j == start_column) {
                            System.out.println("i=" + i + ",j=-" + j + ": " + matrix[i][j]);
                            // spiralNumbers.add(matrix[i][j]);
                            // System.out.print(matrix[i][j]+" ");
                        end_row--;
                        break;
                    } else {
                        System.out.println("i=" + i + ",j=!" + j + ": " + matrix[i][j]);
                        // spiralNumbers.add(matrix[i][j]);
                        // System.out.print(matrix[i][j]+" ");
                        j--;
    
                    }
                }
                
                System.out.println("Printing The First Column");
                // for (i = end_row; i >= start_row && j < (end_column / 2);) {
                for (i = end_row; i >= start_row && j==start_column;) {
                    if (i == start_row) {
                        start_column++;
                        System.out.println("i=" + i + ",j===" + j + ": " + matrix[i][j]);
                        // spiralNumbers.add(matrix[i][j]);
                        // System.out.print(matrix[i][j]+" ");
                        
                    //     System.out.println("Printed the final element of round");
                    //     // if((i/2) == (matrix.length/2)-1){
                    //         // if((i==(matrix.length-1)/2)){
                    //             if(start_row==end_column){
                    //                 // System.out.println("i=" + i + ",j===" + j + ": " + matrix[i][j]);
                    //                 System.out.print(matrix[i][j]+"x ");
                    //                 // if (((start_row == matrix.length / 2) && end_column == matrix[start_row].length / 2)) 
                    //                 continue outer_loop;
                    //     } else {
                    //         System.out.println("Printed the round going for the inner one");
                    //         continue outer_loop;
    
                    //     }
                    } else {
                        System.out.println("i=" + i + ",j=" + j + ": " + matrix[i][j]);
                        // spiralNumbers.add(matrix[i][j]);
                        // System.out.print(matrix[i][j]+" ");
                        i--;
    
                    }
    
                }
    
            }

            // for(int num : spiralNumbers){
            //     System.out.print(num+" ");
            // }




        }
    }
}
























      // System.out.println("Number_Nature: " + (length % 2 == 0 ? "Even" : "Odd"));



        
        
        
        
      //   //> Plaindrome CHeck: Wheher the incemented number is palindrome then  return it
        
      //  System.out.println("**Checking for Plaindrome**");
        
      //   StringBuilder palindrome_Check = new StringBuilder(number);
      //   String reversed_incremented_number = palindrome_Check.reverse().toString();
      //   palindrome_Check = palindrome_Check.reverse();
      //  System.out.println("palindrome_Check: "+palindrome_Check.toString());
      // System.out.println("reversed: "+reversed_incremented_number);
      // System.out.println("palindrome_Check after reversing: "+palindrome_Check.toString());

      //   if(reversed_incremented_number.equals(palindrome_Check.toString())){
      //      System.out.println("Incremented nuber is palindrome itself");
      //       return palindrome_Check.toString();
      //   }
        
        
        
        




      //  System.out.println("\n\n\nCheck failed: going for the Algo\n\n\n");
        
        
        
      //   StringBuilder palindrome_number = new StringBuilder();
        
      //   if (length == 1) {
      //      System.out.println("Return: " + number);
      //       return number;
      //   } else if (length == 2) {
      //       char digits[] = number.toCharArray();
      //       if (Character.getNumericValue(digits[0]) < Character.getNumericValue(digits[1])) {
      //           palindrome_number.append(digits[1]);
      //           palindrome_number.append(digits[1]);
      //       } else {
      //           palindrome_number.append(digits[0]);
      //           palindrome_number.append(digits[0]);
      //       }
      //      System.out.println("Return: " + palindrome_number.toString());
      //       return palindrome_number.toString();
      //   } else {
      //       String real_left,real_right;

      //       // System.out.println("length/2: "+length/2);
      //       String mid="";

      //       if (length % 2 == 0) {
      //           // Even No.of Elements
      //           // no subtaction since substrig is inclusive at end index
      //           // palindrome_number = new StringBuilder(number.substring(0, (length /
      //           // 2)));

      //           real_left = number.substring(0, (length / 2)-1);
      //           mid = number.substring((length / 2) - 1, (length / 2) + 1);
      //           real_right = number.substring(((length / 2)+1), length);

      //           // System.out.println("Even Left: "+real_left);
      //           // System.out.println("Even Right: "+real_right);
      //           // palindrome_number.append(real_left);
      //           // palindrome_number.reverse();

      //           // if( Long.parseLong(real_right)>Long.parseLong(palindrome_number.reverse().toString())){
      //             //  System.out.println("Need to increment the left");
      //           //     palindrome_number.setLength(0);
      //             //  System.out.println("String builder resetted: "+palindrome_number.toString());
      //           //     real_left = String.valueOf(Long.parseLong(real_left)+1);
      //             //  System.out.println("Even Left after incrementing: "+real_left);
                    
      //           // }
      //           // palindrome_number.append(real_left);
      //           // System.out.println("String builder after appending incremented left: "+palindrome_number.toString());
      //           // real_right = palindrome_number.reverse().toString();
      //           // palindrome_number.reverse();
      //           // palindrome_number.append(real_right);

      //       } else {

      //           // Odd No. of elements
      //           real_left = number.substring(0, (length / 2));
      //           mid = number.substring((length / 2), (length / 2) + 1);
      //           real_right = number.substring(((length / 2) + 1), length);
                
      //       }
      //           // palindrome_number = new StringBuilder(number.substring(0, (length /
      //           // 2) - 1));
      //           // -1 since 2 elemnts are mid for even
            

      //      System.out.println("Left of the String: " + real_left);
      //      System.out.println("Mid of the String: " + mid);
      //      System.out.println("Right of the String: " + real_right);

      //       palindrome_number.append(real_left);
      //      System.out.println("Appended left to palindrome: " + palindrome_number.toString());

      //       String palindrome_right = palindrome_number.reverse().toString();
      //       palindrome_number.reverse();

      //       BigInteger big_palindrome_right = new BigInteger(palindrome_right);
      //       BigInteger big_real_right = new BigInteger(real_right);

      //       boolean mid_increment = false;



      //       // > this is not the right condition to check the right is to check whether the digits of mid are same or not
      //       if(
                
      //           big_palindrome_right.compareTo(big_real_right) < 0 ){
      //               // > I want to also chect for gretaer than condition
      //               // System.out.println(palindrome_right+" < "+real_right+" "+((Integer.valueOf(palindrome_right)) <= (Integer.valueOf(real_right))));
      //              System.out.println("Incrementing the Mid");
      //               mid_increment = true;
      //           }

      //               //if mid length 1 increment if 2 pairing up
      //               // if mid = 9 or 90,-------99 then incremt left  by 1 and call fuction again
                
                
      //           if(mid.length() == 1 && mid_increment){
      //              System.out.println("Mid length is 1");
      //               if(Long.parseLong(mid)<9){
      //                  System.out.println("Mid: "+mid+" is < 9 just increment ");
      //                   mid = String.valueOf(Long.parseLong(mid)+1);
      //                  System.out.println("New Mid: "+mid);
                    
      //               }
      //               else{
      //                  System.out.println("Mid: "+mid+" is = 9 increment left");
      //                   mid="0"; //9+1 = 10 ) 0 is placed 1 is carried to left
      //                  System.out.println("New Mid: "+mid);
      //                   real_left = String.valueOf(Long.parseLong(real_left)+1);
      //                  System.out.println("New left: "+real_left);

      //                    //> Recursion Approach
      //                   // StringBuilder string_to_pass = new StringBuilder();
      //                   // string_to_pass.append(real_left);
      //                   // string_to_pass.append(mid);
      //                   // string_to_pass.append(palindrome_right);
      //                   // System.out.println("New String to be [passed: ]"+string_to_pass.toString());
      //                   // System.out.println("-----------------------------------------------");
      //                   // String final_palindrome = nextLargestPalindrome(string_to_pass.toString(),string_to_pass.toString().length() );
      //                   // System.out.println("Immediate next Palindrome: "+final_palindrome);
      //                   // return final_palindrome;


      //                   //> Non Recursion Approach
      //                   palindrome_number.setLength(0);
      //                 System.out.println("palindrome_number after setig to 0: "+palindrome_number.toString());
      //                   palindrome_number.append(real_left);
      //                   real_right = palindrome_number.reverse().toString();
      //                   palindrome_number.reverse();
      //                   palindrome_number.append("0"); 
      //                 System.out.println("StrinBuilder after left incremnt and ) from mid: "+palindrome_number.toString());
      //                   palindrome_number.append(real_right);
                        


      //                 System.out.println("Next palindrome is: " + palindrome_number.toString());
      //                   return palindrome_number.toString();
      //               }
      //           }

      //           if(
      //               (mid.length() ==2) && (mid_increment || (mid.charAt(0)!=mid.charAt(1)))
                    
      //               ){
      //               if(Long.parseLong(mid)<10){
      //                   mid="11";
      //               }
      //               else if (((Long.parseLong(mid)) >= 11 && (Long.parseLong(mid)) < 22))
      //               mid="22";
      //               // palindrome_number.append("22");
      //           else if (((Long.parseLong(mid)) >= 22 && (Long.parseLong(mid)) < 33))
      //           mid="33";    
      //           // palindrome_number.append("33");
      //           else if (((Long.parseLong(mid)) >= 33 && (Long.parseLong(mid)) < 44))
      //           mid="44";    
      //           // palindrome_number.append("44");
      //           else if (((Long.parseLong(mid)) >= 44 && (Long.parseLong(mid)) < 55))
      //           mid="55";    
      //           // palindrome_number.append("55");
      //           else if (((Long.parseLong(mid)) >= 55 && (Long.parseLong(mid)) < 66))
      //           mid="66";    
      //               // palindrome_number.append("66");
      //           else if (((Long.parseLong(mid)) >= 66 && (Long.parseLong(mid)) < 77))
      //           // palindrome_number.append("77");
      //           mid="77";    
      //           else if (((Long.parseLong(mid)) >= 77 && (Long.parseLong(mid)) < 88))
      //           // palindrome_number.append("88");
      //           mid="88";    
      //           else if (((Long.parseLong(mid)) >= 88 && (Long.parseLong(mid)) < 99))
      //           // palindrome_number.append("88");
      //           mid="99";    
      //           else {
      //              System.out.println("Mid:"+mid+ "is in 90 series recall the function and assign mid 00 incremt left");
      //               mid="00";
      //               real_left = String.valueOf(Long.parseLong(real_left)+1);
      //                  System.out.println("New left: "+real_left);


      //                   palindrome_number.setLength(0);
      //                  System.out.println("palindrome_number after setig to 0: "+palindrome_number.toString());
      //                   palindrome_number.append(real_left);
      //                   palindrome_number.append("0"); 
      //                  System.out.println("StrinBuilder after left incremnt and ) from mid: "+palindrome_number.toString());
      //                   real_right = palindrome_number.reverse().toString();
      //                   palindrome_number.reverse();
      //                   palindrome_number.append(real_right);
                        


      //                  System.out.println("Next palindrome is: " + palindrome_number.toString());
      //                   return palindrome_number.toString();

      //                   // StringBuilder string_to_pass = new StringBuilder();
      //                   // string_to_pass.append(real_left);
      //                   // string_to_pass.append(mid);
      //                   // string_to_pass.append(palindrome_right);
      //                   // System.out.println("New String to be [passed: ]"+string_to_pass.toString());
      //                   // System.out.println("-----------------------------------------------");
      //                   // nextLargestPalindrome(string_to_pass.toString(),string_to_pass.toString().length() );
      //                   // String final_palindrome = nextLargestPalindrome(string_to_pass.toString(),string_to_pass.toString().length() );
      //                   // System.out.println("Immediate next Palindrome: "+final_palindrome);
      //                   // return final_palindrome;

      //           }

      //           }
                
                
      //           // if(mid.length() ==2){
      //           //     if(mid.charAt(0)!=mid.charAt(1)){
      //                 //  System.out.println(mid+" ->Mid with 2 digits is palndrome,fixing it ");

      //           //         if(Long.parseLong(mid)<10){
      //           //             mid="11";
      //           //         }
      //           //         else if (((Long.parseLong(mid)) >= 11 && (Long.parseLong(mid)) < 22))
      //           //         mid="22";
                        
      //           //     else if (((Long.parseLong(mid)) >= 22 && (Long.parseLong(mid)) < 33))
      //           //     mid="33";    
                    
      //           //     else if (((Long.parseLong(mid)) >= 33 && (Long.parseLong(mid)) < 44))
      //           //     mid="44";    
                    
      //           //     else if (((Long.parseLong(mid)) >= 44 && (Long.parseLong(mid)) < 55))
      //           //     mid="55";    
                    
      //           //     else if (((Long.parseLong(mid)) >= 55 && (Long.parseLong(mid)) < 66))
      //           //     mid="66";    
                        
      //           //     else if (((Long.parseLong(mid)) >= 66 && (Long.parseLong(mid)) < 77))
                    
      //           //     mid="77";    
      //           //     else if (((Long.parseLong(mid)) >= 77 && (Long.parseLong(mid)) < 88))
                    
      //           //     mid="88"; 
                    
      //           //     else 
      //           //     mid="99";

      //           //     }
      //             //  System.out.println("Mid after fixing: "+ mid);

      //           // }




      //           palindrome_number.append(mid);
      //                  System.out.println("Palindrome after mid: " + palindrome_number.toString());
      //       palindrome_number.append(palindrome_right);